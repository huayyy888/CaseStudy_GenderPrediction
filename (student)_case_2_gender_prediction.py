# -*- coding: utf-8 -*-
"""(student) Case_2_Gender_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kuVlv8BVNqdnL8i7458Y2cs-dboxW2Q1

## Beforehand...
** 1.1 NLTK Setup  **
   - Install the NLTK library (refer to the previous python file)
   - Once NLTK is installed, the text data files (corpora) should be downloaded.  See the following cell to start the download.
"""

# pip install nltk

"""## Question 1"""

# code to build a classifier to classify names as male or female
# demonstrates the basics of feature extraction and model building
# retrieve dataset inside nltk library

import nltk
nltk.download('names')  #complete this

names = [(name, 'male') for name in nltk.corpus.names.words("male.txt")]       #complete this
names += [(name, 'female') for name in nltk.corpus.names.words("female.txt")]    #complete this
print (names[0:10])

#print (names)
print("\nNumber of male names:")
print (len(nltk.corpus.names.words('male.txt')))

print("\nNumber of female names:")
print (len(nltk.corpus.names.words('female.txt')))

male_names = nltk.corpus.names.words('male.txt')
print("\nFirst 10 male names:")
print (male_names[0:10])

female_names = nltk.corpus.names.words('female.txt')
print("\nFirst 10 female names:")
print (female_names[0:10])

data_path = nltk.data.find('corpora/names')                                       #complete this
print("NLTK data directory:", data_path)

"""## Question 2"""

# feature extraction function (since the data is clean, we may skip the data cleaning)

def extract_gender_features(name):
    name = name.lower()
    features = {}
    features["suffix"] = name[-1:]
    features["suffix2"] = name[-2:] if len(name) > 1 else name[0]
    features["suffix3"] = name[-3:] if len(name) > 2 else name[0]
    features["suffix4"] = name[-4:] if len(name) > 3 else name[0]
    features["suffix5"] = name[-5:] if len(name) > 4 else name[0]
    features["suffix6"] = name[-6:] if len(name) > 5 else name[0]
    features["prefix"] = name[:1] #J
    features["prefix2"] = name[:2] if len(name) > 1 else name[0]
    features["prefix3"] = name[:3] if len(name) > 2 else name[0]
    features["prefix4"] = name[:4] if len(name) > 3 else name[0]
    features["prefix5"] = name[:5] if len(name) > 4 else name[0]

    print (features)
    return features

"""## Question 3"""

# perform feature extraction for every data

data = [(extract_gender_features(name),gender) for (name,gender) in names]                        #complete this
print (data)  #categarize features with corresponding genders

"""## Question 4"""

# Machine learning: data splitting

import random
random.shuffle(data)                          #complete this - rearranges the order of items in a sequence (like a list) randomly.

dataCount = len(data)
trainCount = int (.8*dataCount)                    #complete this
print(trainCount)

trainData = data[:trainCount]
testData = data[trainCount:]
print(len(testData))

"""## Question 5"""

# Machine learning: data training (use Naive Bayes)

bayes = nltk.NaiveBayesClassifier.train(trainData)                           #complete this

"""## Question 6"""

# Machine learning: accuracy

print("trainData accuracy=", nltk.classify.accuracy(bayes,trainData))                              #complete this
print("testData accuracy=", nltk.classify.accuracy(bayes,testData))                             #complete this

bayes.show_most_informative_features(25)

"""## Question 7"""

# Predict a new name

input_name = input("Name:")
print(bayes.classify(extract_gender_features(input_name)))                                #complete this

"""## Question 8"""

# Display wrong prediction for improvement

errors = []

for (name,label) in names:
    if bayes.classify(extract_gender_features(name)) != label:
        errors.append({"name": name, "label": label})

errors

"""## Question 9"""

# Store the model into joblib using dump method
# complete this
from joblib import dump
dump(bayes, 'gender_prediction.joblib')
